"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addIOSAuth0ConfigInInfoPList = exports.addAuth0AppDelegateCode = exports.addAndroidAuth0Gradle = exports.addAuth0GradleValues = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const generateCode_1 = require("@expo/config-plugins/build/utils/generateCode");
let pkg = {
    name: 'react-native-auth0',
};
try {
    pkg = require('react-native-auth0/package.json');
}
catch {
    // empty catch block
}
const addAuth0GradleValues = (src, auth0Domain, auth0Scheme = 'applicationId') => {
    return (0, generateCode_1.mergeContents)({
        tag: 'react-native-auth0-manifest-placeholder',
        src,
        newSrc: `manifestPlaceholders = [auth0Domain: "${auth0Domain}", auth0Scheme: "${auth0Scheme}"]`,
        anchor: /defaultConfig {/,
        offset: 1,
        comment: '//',
    }).contents;
};
exports.addAuth0GradleValues = addAuth0GradleValues;
const withAndroidAuth0Gradle = (config, props) => {
    return (0, config_plugins_1.withAppBuildGradle)(config, config => {
        return (0, exports.addAndroidAuth0Gradle)(props, config);
    });
};
const addAndroidAuth0Gradle = (props, config) => {
    var _a, _b, _c;
    if (config.modResults.language === 'groovy') {
        if (!(props === null || props === void 0 ? void 0 : props.domain)) {
            throw Error('No auth0 domain specified in expo config');
        }
        const auth0Domain = props.domain;
        let auth0Scheme = (_c = (_a = props.customScheme) !== null && _a !== void 0 ? _a : (_b = config.android) === null || _b === void 0 ? void 0 : _b.package) !== null && _c !== void 0 ? _c : (() => {
            throw new Error('No auth0 scheme specified or package found in expo config');
        })();
        config.modResults.contents = (0, exports.addAuth0GradleValues)(config.modResults.contents, auth0Domain, auth0Scheme);
        return config;
    }
    else {
        throw new Error('Cannot add auth0 build.gradle modifications because the build.gradle is not groovy');
    }
};
exports.addAndroidAuth0Gradle = addAndroidAuth0Gradle;
const addAuth0AppDelegateCode = (src) => {
    let tempSrc = src;
    // Tests to see if the RCTLinkingManager has already been added
    if (!/\[RCTLinkingManager.*application:.*openURL:.*options:.*\]/.test(tempSrc)) {
        tempSrc = (0, generateCode_1.mergeContents)({
            src: tempSrc,
            newSrc: [
                '- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url',
                '            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options',
                '{',
                '  return [RCTLinkingManager application:app openURL:url options:options];',
                '}',
            ].join('\n'),
            tag: 'react-native-auth0-linking',
            anchor: /@end/,
            comment: '//',
            offset: 0,
        }).contents;
    }
    // Checks to see if RCTLinkingManager hasn't been imported
    if (!/RCTLinkingManager\.h/.test(tempSrc)) {
        tempSrc = (0, generateCode_1.mergeContents)({
            src: tempSrc,
            newSrc: `#import <React/RCTLinkingManager.h>`,
            anchor: /#import <React\/RCTBridge\.h>/,
            offset: 1,
            tag: 'react-native-auth0-import',
            comment: '//',
        }).contents;
    }
    return tempSrc;
};
exports.addAuth0AppDelegateCode = addAuth0AppDelegateCode;
const withIOSAuth0AppDelegate = config => {
    return (0, config_plugins_1.withAppDelegate)(config, config => {
        const src = config.modResults.contents;
        config.modResults.contents = (0, exports.addAuth0AppDelegateCode)(src);
        return config;
    });
};
const withIOSAuth0InfoPList = (config, props) => {
    return (0, config_plugins_1.withInfoPlist)(config, config => {
        return (0, exports.addIOSAuth0ConfigInInfoPList)(props, config);
    });
};
const addIOSAuth0ConfigInInfoPList = (props, config) => {
    var _a, _b, _c;
    if (!config.modResults.CFBundleURLTypes) {
        config.modResults.CFBundleURLTypes = [];
    }
    let auth0Scheme = (_c = (_a = props.customScheme) !== null && _a !== void 0 ? _a : (_b = config.ios) === null || _b === void 0 ? void 0 : _b.bundleIdentifier) !== null && _c !== void 0 ? _c : (() => {
        throw new Error('No auth0 scheme specified or bundle identifier found in expo config');
    })();
    if (auth0Scheme) {
        if (config.modResults.CFBundleURLTypes.some(({ CFBundleURLSchemes }) => CFBundleURLSchemes.includes(auth0Scheme))) {
            return config;
        }
        config.modResults.CFBundleURLTypes.push({
            CFBundleURLName: 'auth0',
            CFBundleURLSchemes: [auth0Scheme],
        });
    }
    return config;
};
exports.addIOSAuth0ConfigInInfoPList = addIOSAuth0ConfigInInfoPList;
const withAuth0 = (config, props) => {
    if (!(props === null || props === void 0 ? void 0 : props.domain)) {
        throw Error('No auth0 domain specified in expo config');
    }
    config = withAndroidAuth0Gradle(config, props);
    config = withIOSAuth0AppDelegate(config, props);
    config = withIOSAuth0InfoPList(config, props);
    return config;
};
exports.default = (0, config_plugins_1.createRunOncePlugin)(withAuth0, pkg.name, pkg.version);
